import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:jop_finder_app/features/auth/data/model/user_model.dart';
import 'package:jop_finder_app/features/auth/data/model/UserProfile_model.dart';
import 'package:jop_finder_app/features/auth/data/web_services/firebase_authentication_web_services.dart';

class FirebaseProfileWebServices {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final FireBaseAuthenticationWebServices _authenticationWebServices;

  FirebaseProfileWebServices(this._authenticationWebServices);

  // Get the current user's ID from FirebaseAuth
  String? getCurrentUserId() {
    return _authenticationWebServices.getCurrentUser()?.uid;
  }

  // Fetch user information from Firestore
  Future<User?> getUserInfo() async {
    String? userId = getCurrentUserId();
    if (userId == null) return null;

    try {
      DocumentSnapshot userDoc = await _firestore.collection('users').doc(userId).get();
      if (userDoc.exists) {
        return User.fromFirestore(userDoc);
      }
      return null;
    } catch (e) {
      print(e.toString());
      return null;
    }
  }

  // Update user information in Firestore
  Future<bool> updateUserInfo(User user) async {
    String? userId = getCurrentUserId();
    if (userId == null) return false;

    try {
      await _firestore.collection('users').doc(userId).update(user.toFirestore());
      return true;
    } catch (e) {
      print(e.toString());
      return false;
    }
  }

  // Update user profile information in Firestore
  Future<bool> updateUserProfile(UserProfile profile) async {
    String? userId = getCurrentUserId();
    if (userId == null) return false;

    try {
      await _firestore.collection('users').doc(userId).update({
        'profile': profile.toMap(),
      });
      return true;
    } catch (e) {
      print(e.toString());
      return false;
    }
  }
}

/*
  String? getCurrentUserId() {
    return _authenticationWebServices.getCurrentUser()?.uid;
  }
*/



// ignore: slash_for_doc_comments
  /**
   * 
   * // get file
final result = await FilePicker.platform.pickFiles(type: FileType.any, allowMultiple: false);

if (result != null && result.files.isNotEmpty) {
  final fileBytes = result.files.first.bytes;
  final fileName = result.files.first.name;
  
  // upload file
  await FirebaseStorage.instance.ref('uploads/$fileName').putData(fileBytes);
}
   */

//   // Method to upload a file to Firebase Storage
//   Future<bool?> uploadFile(File cvPdf) async {
//     //  String? userId = getCurrentUserId();
//     // if (userId == null) return false;
//     try {
//   String fileName = DateTime.now().millisecondsSinceEpoch.toString();
//   Reference ref = FirebaseStorage.instance.ref().child('CVs/$fileName');

//   UploadTask uploadTask;

//   // Check if running on web
//   if (kIsWeb) {
//     // Use bytes for uploading if on web
//     final bytes = cvPdf.bytes; // Assuming cvPdf is the file picked using FilePicker and has a bytes property
//     if (bytes == null) throw Exception("File bytes are null");
//     uploadTask = ref.putData(bytes);
//   } else {
//     // Use the file path for uploading if not on web
//     uploadTask = ref.putFile(cvPdf);
//   }

//   final snapshot = await uploadTask.whenComplete(() {
//     print("complete uploading");
//   });
//   final cvUrl = await snapshot.ref.getDownloadURL();
//   print("the cv url is: $cvUrl");
//   return true;
// } catch (e) {
//   print(e.toString());
//   return null;
// }
//  



////
// ignore_for_file: prefer_const_constructors, prefer_const_literals_to_create_immutables

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:intl/intl.dart';
import 'package:jop_finder_app/core/constants/app_colors.dart';
import 'package:jop_finder_app/features/auth/data/model/PostedJob_model.dart';
import 'package:jop_finder_app/features/auth/data/model/user_model.dart';
import 'package:jop_finder_app/features/profile/viewmodel/profile_cubit.dart';

class ProposalsScreen extends StatefulWidget {
  const ProposalsScreen({super.key});

  @override
  State<ProposalsScreen> createState() => _ProposalsScreenState();
}

class _ProposalsScreenState extends State<ProposalsScreen> {
  UserModel? user;
  ProfileCubit? profileCubit;

  @override
  void initState() {
    super.initState();
    profileCubit = BlocProvider.of<ProfileCubit>(context);
    // Schedule the asynchronous operation to fetch user information
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _fetchUserInfo();
    });
  }

  Future<void> _fetchUserInfo() async {
    // Fetch user information from Firestore using the cubit method
    var fetchedUser =
        await BlocProvider.of<ProfileCubit>(context).getUserInfo();
    if (mounted) {
      setState(() {
        user = fetchedUser;
      });
    }
  }

  Widget buildBlock() {
    return BlocBuilder<ProfileCubit, ProfileState>(
      builder: (context, state) {
        if (state is ProfileLoading) {
          return Center(child: CircularProgressIndicator());
        } else if (state is UserLoaded) {
          user = state.user;
          return buildApplicationsScreen();
        } else if (state is ProfileError) {
          return Center(child: Text(state.errorMessage));
        } else {
          return Center(child: Text('Error occurred'));
        }
      },
    );
  }

  Widget buildApplicationsScreen() {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'You have ${user?.postedJobs?.length ?? 0} Jobs Posted',
            style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
          ),
          SizedBox(height: 16),
          Expanded(
            child: ListView.builder(
              itemCount: user!.postedJobs!.length,
              itemBuilder: (context, index) {
                return PostedJobCard(postedJob: user!.postedJobs![index]);
              },
            ),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        backgroundColor: const Color.fromARGB(240, 255, 255, 255),
        appBar: AppBar(
          backgroundColor: Color.fromARGB(240, 255, 255, 255),
          title: Text('Proposals'),
          centerTitle: true,
          leading: IconButton(
            icon: Icon(Icons.arrow_back, color: Colors.black),
            onPressed: () {
              Navigator.of(context).pop();
            },
          ),
          actions: [
            if (user != null)
              CircleAvatar(
                backgroundImage: NetworkImage(user!.profileImageUrl!),
              ),
            SizedBox(width: 10),
          ],
        ),
        body: buildBlock());
  }
}

class PostedJobCard extends StatelessWidget {
  final PostedJob postedJob;

  const PostedJobCard({super.key, required this.postedJob});
  @override
  Widget build(BuildContext context) {
    return Card(
      color: Colors.white,
      margin: EdgeInsets.symmetric(vertical: 8.0),
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Column(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    CircleAvatar(
                      radius: 35,
                      foregroundImage: NetworkImage(
                        postedJob.imageUrl ??
                            'https://picsum.photos/200/300', // Replace with actual company logo URL
                      ),
                    ),
                    SizedBox(width: 14),
                    Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          postedJob.jobTitle ?? 'No Title',
                          style: TextStyle(
                              fontSize: 18, fontWeight: FontWeight.bold),
                        ),
                        SizedBox(height: 4),
                        Text(
                          postedJob.companyName ?? 'No Company',
                          style:
                              TextStyle(fontSize: 16, color: Colors.grey[600]),
                        ),
                      ],
                    ),
                  ],
                ),
                SizedBox(height: 20),
                Container(
                  margin: EdgeInsets.only(left: 4),
                  child: Text(postedJob.salary ?? 'No salary',
                      style: TextStyle(fontSize: 16)),
                ),
              ],
            ),
            Column(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Container(
                  padding: EdgeInsets.symmetric(horizontal: 12, vertical: 4),
                  decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(12),
                    border: Border.all(color: AppColors.primaryBlue, width: 1),
                  ),
                  child: Text(
                    postedJob.applicantIds!.length.toString(),
                    style: TextStyle(
                      color: AppColors.primaryBlue,
                      fontSize: 16,
                    ),
                  ),
                ),
                const SizedBox(height: 26),
                Column(
                  children: [
                    Text(postedJob.location ?? 'No Location',
                        style: TextStyle(fontSize: 14, color: Colors.grey)),
                    SizedBox(height: 6),
                    Text(DateFormat('d/M/y').format(postedJob.postedDate!),
                        style: TextStyle(
                            fontSize: 14,
                            color: Colors.black,
                            fontWeight: FontWeight.bold)),
                  ],
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}



//////////////// Applications.dart
// ignore_for_file: prefer_const_constructors, prefer_const_literals_to_create_immutables

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:jop_finder_app/features/auth/data/model/AppliedJob_model.dart';
import 'package:jop_finder_app/features/auth/data/model/user_model.dart';
import 'package:jop_finder_app/features/profile/viewmodel/profile_cubit.dart';

class ApplicationsScreen extends StatefulWidget {
  const ApplicationsScreen({super.key});

  @override
  State<ApplicationsScreen> createState() => _ApplicationsScreenState();
}

class _ApplicationsScreenState extends State<ApplicationsScreen> {
  UserModel? user;
  ProfileCubit? profileCubit;

  @override
  void initState() {
    super.initState();
    profileCubit = BlocProvider.of<ProfileCubit>(context);
    // Schedule the asynchronous operation to fetch user information
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _fetchUserInfo();
    });
  }

  Future<void> _fetchUserInfo() async {
    var fetchedUser =
        await BlocProvider.of<ProfileCubit>(context).getUserInfo();
    if (mounted) {
      setState(() {
        user = fetchedUser;
      });
    }
  }

  Widget buildBlock() {
    return BlocBuilder<ProfileCubit, ProfileState>(
      builder: (context, state) {
        if (state is ProfileLoading) {
          return Center(child: CircularProgressIndicator());
        } else if (state is UserLoaded) {
          user = state.user;
          return buildApplicationsScreen();
        } else if (state is ProfileError) {
          return Center(child: Text(state.errorMessage));
        } else {
          return Center(child: Text('Error occurred'));
        }
      },
    );
  }
  

  Widget buildApplicationsScreen() {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'You have \n${user?.appliedJobs?.length ?? 0} Applications',
            style: Theme.of(context).textTheme.titleLarge,
          ),
          SizedBox(height: 16),
          Expanded(

            child: ListView.builder(
              itemCount: user!.appliedJobs!.length,
              itemBuilder: (context, index) {
                return ApplicationCard(appliedJob: user!.appliedJobs![index]);
              },
            ),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return SafeArea(
      child: Scaffold(
          appBar: AppBar(
            title: Text('Applications'),
            leading: IconButton(
              icon: Icon(Icons.arrow_back, ),
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
            actions: [
              if (user != null)
                CircleAvatar(
                  backgroundImage: NetworkImage(
                    user!.profileImageUrl??'https://avatars.githubusercontent.com/u/953478?v=4?s=400'),
                ),
              SizedBox(width: 10),
            ],
          ),
          body: buildBlock()),
    );
  }

}


class ApplicationCard extends StatelessWidget {
  final AppliedJob appliedJob;
  const ApplicationCard({super.key, required this.appliedJob});


  @override
  Widget build(BuildContext context) {
    return Card(
      surfaceTintColor: Theme.of(context).cardTheme.surfaceTintColor,
      color:Theme.of(context).cardTheme.color,
      shape: Theme.of(context).cardTheme.shape,
      margin: Theme.of(context).cardTheme.margin,
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Column(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    if(appliedJob.companyImageURL != null)
                    CircleAvatar(
                      radius: 35,
                      foregroundImage: NetworkImage(
                        appliedJob.companyImageURL! 
                      ),
                    )
                    else
                     Container(
                      width: 70,
                      height: 70,
                      decoration: BoxDecoration(
                        color: Colors.grey[300],
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: const Icon(Icons.work, color: Colors.grey),
                    ),
                    SizedBox(width: 14),
                    Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          appliedJob.jobTitle ?? 'No Title',
                          style: TextStyle(
                              fontSize: 18, fontWeight: FontWeight.bold),
                        ),
                        SizedBox(height: 4),
                        Text(
                          appliedJob.companyName ?? 'No Company',
                          style:
                              TextStyle(fontSize: 16, color: Colors.grey[600]),
                        ),
                      ],
                    ),
                  ],
                ),
                SizedBox(height: 20),
                Container(
                  margin: EdgeInsets.only(left: 4),
                  child: Text(appliedJob.salary ?? 'No salary',
                      style: TextStyle(fontSize: 16)),
                ),
              ],
            ),
            Column(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Column(
                  children: [
                    Container(
                      margin: EdgeInsets.only(top: 16),
                      child: Text(appliedJob.jobType ?? 'No Type',
                          style: TextStyle(
                              fontSize: 14,
                              color: Colors.black,
                              fontWeight: FontWeight.bold)),
                    ),
                    SizedBox(height: 4),
                    Text(appliedJob.location ?? 'No Location',
                        style: TextStyle(fontSize: 14, color: Colors.grey)),
                  ],
                ),
                SizedBox(height: 34),
                Container(
                  padding: EdgeInsets.symmetric(horizontal: 12, vertical: 4),
                  decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(12),
                    border: Border.all(
                        color: appliedJob.status == "Canceled"
                            ? Colors.red
                            : Colors.green,
                        width: 1),
                  ),
                  child: Text(
                    appliedJob.status ?? 'no status',
                    style: TextStyle(
                        color: appliedJob.status == "Canceled"
                            ? Colors.red
                            : Colors.green),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}



